@using System.Globalization
@using System.Security.Claims
@using BlogProject.Web.ViewModels
@model PostDetailsViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = $"{Model.Post.Title}";
    foreach (var item in User.Claims)
    {
        Console.WriteLine(item.Value);
    }
}


<script>
    const currentUserId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
    const currentPostId = "@Model.Post.Id";
</script>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Post.Title</title>
    <style>
        .like-button {
            color: gray;
            cursor: pointer;
            transition: color 0.3s;
        }

            .like-button.liked {
                color: greenyellow; /* Beğenildiğinde farklı renk */
            }

        /* Header */
        .header {
        background-color: var(--white);
        border-bottom: 1px solid var(--medium-gray);
        padding: 1rem 0;
        position: sticky;
        top: 0;
        z-index: 100;
        }



        /* Navbar */
        .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        }



        .brand-logo {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--black);
        text-decoration: none;
        }

        .brand-logo .dot {
        color: var(--primary);
        }

        .user-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
        }

        .btn-signin, .btn-signup {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s;
        }

        .btn-signin {
        border: 1px solid var(--medium-gray);
        color: var(--dark-gray);
        background: transparent;
        }

        .btn-signin:hover {
        background-color: var(--light-gray);
        }

        .btn-signup {
        border: 1px solid var(--primary);
        background-color: var(--primary);
        color: var(--white);
        }

        .btn-signup:hover {
        background-color: #1d4ed8;
        }

        .user-dropdown {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--dark-gray);
        font-weight: 500;
        }

        .user-dropdown-toggle {
        display: flex;
        align-items: center;
        }

        .profile-photo {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
        }

        .notification-badge {
        width: 8px;
        height: 8px;
        background-color: var(--danger);
        border-radius: 50%;
        position: absolute;
        top: 0;
        right: 0;
        }

        .dropdown-menu {
        border: 1px solid var(--medium-gray);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        }

        .dropdown-item i {
        width: 20px;
        text-align: center;
        margin-right: 0.5rem;
        }

        :root {
        --black: #1a1a1a;
        --white: #ffffff;
        --gray-50: #f9fafb;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-400: #9ca3af;
        --gray-600: #4b5563;
        --gray-800: #1f2937;
        --primary: #3b82f6;
        --primary-light: #93c5fd;
        --accent: #7c3aed;
        --radius: 8px;
        --shadow-sm: 0 1px 2px 0 rgba(0,0,0,0.05);
        --shadow-md: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
        --space-xs: 0.5rem;
        --space-sm: 0.75rem;
        --space-md: 1rem;
        --space-lg: 1.5rem;
        --space-xl: 2rem;
        --space-2xl: 3rem;
        }

        * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        }


        body {
        background-color: white;
        }


        /* Typography */
        h1, h2, h3, h4 {
        font-weight: 600;
        line-height: 1.3;
        color: var(--black);
        }

        h1 {
        font-size: 2.25rem;
        margin-bottom: var(--space-md);
        }

        h2 {
        font-size: 1.75rem;
        margin: var(--space-xl) 0 var(--space-md);
        }

        h3 {
        font-size: 1.25rem;
        }

        p {
        margin-bottom: var(--space-md);
        }

        a {
        color: var(--primary);
        text-decoration: none;
        transition: color 0.2s;
        }

        a:hover {
        color: var(--accent);
        }

        /* Layout Components */
        .back-btn {
        display: inline-flex;
        align-items: center;
        gap: var(--space-xs);
        margin: var(--space-xl) 0;
        font-weight: 500;
        color: var(--gray-600);
        }

        .back-btn:hover {
        color: var(--black);
        }

        .post-header {
        margin-bottom: var(--space-xl);
        text-align: center;
        }

        .post-category {
        display: inline-block;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        /* color: var(--accent); */
        color:red;
        margin-bottom: var(--space-sm);
        }

        .post-meta {
        color: var(--gray-600);
        font-size: 0.9rem;
        margin-bottom: var(--space-md);
        }

        .post-image {
        width: 100%;
        height: auto;
        max-height: 450px;
        object-fit: cover;
        border-radius: var(--radius);
        margin: var(--space-xl) 0;
        box-shadow: var(--shadow-md);
        }

        .post-content {
        font-size: 1.05rem;
        line-height: 1.7;
        }

        .post-content img {
        width: 100%;
        height: auto;
        border-radius: var(--radius);
        margin: var(--space-lg) 0;
        }

        blockquote {
        border-left: 3px solid var(--primary-light);
        padding-left: var(--space-lg);
        margin: var(--space-lg) 0;
        color: var(--gray-600);
        font-style: italic;
        }

        ul, ol {
        margin-bottom: var(--space-md);
        padding-left: var(--space-lg);
        }

        li {
        margin-bottom: var(--space-xs);
        }

        hr {
        border: 0;
        height: 1px;
        background: var(--gray-200);
        margin: var(--space-xl) 0;
        }

        /* Author Card */
        .author-card {
        display: flex;
        gap: var(--space-lg);
        align-items: flex-start;
        padding: var(--space-lg);
        border-radius: var(--radius);
        margin: var(--space-xl) 0;
        }

        .author-avatar {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        overflow: hidden;
        flex-shrink: 0;
        border: 2px solid var(--white);
        box-shadow: var(--shadow-sm);
        }

        .author-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        }

        .commentor-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        overflow: hidden;
        flex-shrink: 0;
        border: 2px solid var(--white);
        box-shadow: var(--shadow-sm);
        }

        .commentor-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        }

        .author-by {
        font-size: 0.75rem;
        color: var(--gray-600);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: var(--space-xs);
        }

        .author-name {
        margin-bottom: var(--space-sm);
        }

        .author-bio {
        color: var(--gray-600);
        font-size: 0.9rem;
        margin-bottom: var(--space-md);
        }

        .author-social {
        display: flex;
        gap: var(--space-sm);
        }

        .social-link {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--gray-100);
            color: var(--gray-600); /* varsayılan yazı rengi */
            transition: background 0.2s, color 0.2s;
        }

            /* Hover durumunda yazı rengi beyaz olur */
            .social-link:hover {
                background: black;
                color: white;
            }

            /* İkonlar yazı rengini miras alır, geçiş efektli olur */
            .social-link .fa-brands,
            .social-link .fa-solid {
                color: inherit;
                transition: color 0.2s;
            }


        




        /* Comments */
        .comments {
        margin: var(--space-2xl) 0;
        }

        .comments-header {
        margin-bottom: var(--space-lg);
        padding-bottom: var(--space-md);
        border-bottom: 1px solid var(--gray-200);
        }

        .comments-title {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        font-size: 1.25rem;
        }

        .comment-count {
        background: var(--gray-100);
        color: var(--gray-600);
        font-size: 0.8rem;
        padding: 0.2rem 0.6rem;
        border-radius: 20px;
        }

        .comment-form {
        display: flex;
        gap: var(--space-md);
        margin-bottom: var(--space-xl);
        }

        .form-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary), var(--accent));
        color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        flex-shrink: 0;
        }

        .comment-input {
        flex-grow: 1;
        }

        .comment-input textarea {
        width: 100%;
        border: 1px solid var(--gray-200);
        border-radius: var(--radius);
        padding: var(--space-md);
        font-family: inherit;
        resize: none;
        min-height: 100px;
        transition: all 0.2s;
        }

        .comment-input textarea:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .commentReply-input {
        flex-grow: 1;
        }

        .commentReply-input textarea {
        width: 80%;
        border: 1px solid var(--gray-200);
        border-radius: var(--radius);
        padding: var(--space-md);
        font-family: inherit;
        resize: none;
        min-height: 100px;
        transition: all 0.2s;
        }

        .commentReply-input textarea:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: var(--space-sm);
        }

        .submit-btn {
        background: var(--primary);
        color: var(--white);
        border: none;
        padding: var(--space-sm) var(--space-lg);
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
        }

        .submit-btn:hover {
        background: var(--accent);
        }

        .comment-list {
        display: flex;
        flex-direction: column;
        gap: var(--space-xl);
        }

        .comment {
        display: flex;
        gap: var(--space-md);
        }

        .comment-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #4facfe, #00f2fe);
        color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        flex-shrink: 0;
        }

        .comment-header {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
        margin-bottom: var(--space-xs);
        }

        .comment-author {
        font-weight: 500;
        }

        .comment-date {
        color: var(--gray-600);
        font-size: 0.85rem;
        }

        .comment-content {
        line-height: 1.6;
        margin-bottom: var(--space-sm);
        }

        .comment-footer {
        display: flex;
        gap: var(--space-md);
        }

        .reply-btn, .like-btn {
        background: none;
        border: none;
        color: var(--gray-600);
        cursor: pointer;
        font-size: 0.85rem;
        padding: 0;
        transition: color 0.2s;
        }

        .reply-btn:hover, .like-btn:hover {
        color: var(--primary);
        }

        .comment-reply {
        margin-top: var(--space-lg);
        margin-left: var(--space-lg);
        padding-left: var(--space-md);
        border-left: 2px solid var(--gray-200);
        display: flex;
        gap: var(--space-md);
        }

        .comment-reply-sm {
        margin-top: var(--space-sm); /* Daha küçük boşluk */
        margin-left: var(--space-sm);
        padding-left: var(--space-xs); /* Daha az iç boşluk */
        border-left: 2px solid var(--gray-200);
        display: flex;
        gap: var(--space-md);
        height: 40%;
        }

        /* Related Posts */
        .related-posts {
        margin: var(--space-2xl) 0;
        }

        .related-title {
        font-size: 1.5rem;
        margin-bottom: var(--space-xl);
        text-align: center;
        }

        #sharePopup a {
            text-decoration: none;
            padding: 5px 10px;
            border-radius: 4px;
            display: block;
            text-align: center;
            font-weight: 600;
        }


        .related-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: var(--space-lg);
        }

        .related-post {
            background-color:white;
        border-radius: var(--radius);
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        box-shadow: var(--shadow-md);
        }

        .related-post:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-md);
        }

        .related-post-img {
        width: 100%;
        height: 160px;
        object-fit: cover;
        }

        .related-post-body {
        padding: var(--space-md);
        }

        .related-post-title {
        font-size: 1.1rem;
        margin-bottom: var(--space-sm);
        }

        .related-post-link {
        display: inline-flex;
        align-items: center;
        gap: var(--space-xs);
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--primary);
        }

        .related-post-link:hover {
        color: var(--accent);
        }

        @@media (max-width: 576px) {
            .related-grid {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
                padding: 0 1rem;
            }

                .related-grid .col-md-4 {
                    flex: unset;
                    max-width: 100%;
                    width: 100%;
                }

            .related-post {
                width: 100%;
                border-radius: 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            }

            .related-post-img {
                width: 100%;
                height: auto;
                aspect-ratio: 16 / 9;
                object-fit: cover;
                display: block;
            }

            .related-post-body {
                padding: 1rem;
            }

            .related-post-title {
                font-size: 1.05rem;
                line-height: 1.4;
            }

            .related-post-link {
                font-size: 0.9rem;
            }
        }

        @@media (max-width: 576px) {
            .related-grid {
                flex-direction: column;
                align-items: center; /* 🔸 Kartları ortala */
                gap: 1.2rem;
                padding-left: 1rem;
                padding-right: 1rem;
            }

                .related-grid .col-md-4 {
                    flex: none;
                    width: 100%;
                    max-width: 400px; /* 🔸 Genişliği sınırlı tut */
                }

            .related-post {
                width: 100%;
                border-radius: 12px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            }

            .related-post-img {
                width: 100%;
                height: auto;
                aspect-ratio: 16 / 9;
                object-fit: cover;
            }

            .related-post-body {
                padding: 1rem;
            }

            .related-post-title {
                font-size: 1.05rem;
            }

            .related-post-link {
                font-size: 0.9rem;
            }
        }
        @@media (max-width: 576px) {
            .related-grid .col-md-4

        {
            flex: 0 0 100% !important;
            max-width: 100% !important;
            width: 100% !important;
        }

        .related-grid {
            flex-direction: column;
            align-items: center;
            padding: 0 1rem;
            gap: 1.5rem;
        }

        .related-post {
            width: 100%;
            max-width: 420px;
            border-radius: 12px;
        }

        }







        /* Responsive */
        @@media (max-width: 640px) {
        .container {
        padding: 0 var(--space-sm);
        }

        h1 {
        font-size: 1.75rem;
        }

        h2 {
        font-size: 1.5rem;
        }

        .author-card {
        flex-direction: column;
        align-items: center;
        text-align: center;
        }

        .author-social {
        justify-content: center;
        }

        .comment-form {
        flex-direction: column;
        }

        .form-actions {
        justify-content: flex-start;
        }
        }

        /* Alternatif stil 2 - Modern geçiş */
        .post-reply-btn-alt2 {
        padding: 8px 16px;
        background: #ffffff;
        color: #000;
        border: 1px solid #000;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);
        position: relative;
        overflow: hidden;
        }

        .post-reply-btn-alt2::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0,0,0,0.8), transparent);
        transition: left 0.5s ease;
        }

        .post-reply-btn-alt2:hover {
        background: #000;
        color: #fff;
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }

        .post-reply-btn-alt2:hover::before {
        left: 100%;
        }

        .social-link {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--gray-100);
            color: var(--gray-600);
            transition: background 0.2s, color 0.2s;
        }

            .social-link:hover {
                background: black;
                color: white !important;
            }

            /* İkonlar varsayılan olarak linkin rengini miras alır */
            .social-link .fa-brands,
            .social-link .fa-solid {
                color: inherit !important;
                transition: color 0.2s;
            }

            /* Hover durumunda ikonlar beyaz olur */
            .social-link:hover .fa-brands,
            .social-link:hover .fa-solid {
                color: white !important;
            }

            /* Focus efekti: modern, zarif yeşil */
            #commentText:focus {
                outline: none;
                border-color: #38b382; /* 🍃 Şık, doğal yeşil */
                box-shadow: 0 0 0 4px rgba(56, 179, 130, 0.2); /* Yumuşak yeşil glow */
            }

        textarea[name="ReplyText"]:focus {
            outline: none;
            border-color: #38b382; /* 🍃 Şık, doğal yeşil */
            box-shadow: 0 0 0 4px rgba(56, 179, 130, 0.2); /* Yumuşak yeşil glow */
        }

        .like-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }



    </style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="post-area">

        <div>
            <input type="hidden" id="postId" value="@Model.Post.Id" />

            <button id="summarizeBtn">Özetle</button>
            <div id="summaryResult"></div>
        </div>
        <article>
            <header class="post-header mb-0" style="position:inherit">
                <span class="post-category">@Model.Post.CategoryName</span>
                <h1>@Model.Post.Title</h1>
                <div class="post-meta">Published on @Model.Post.CreatedTime.ToString("dddd d, yyyy", CultureInfo.InvariantCulture) · @Model.ReadingTime.Minutes min read</div>
            </header>

            <img src="@Model.Post.CoverImageUrl" alt="Web Development" class="post-image">

            <div class="post-content">
                @Html.Raw(Model.Post.Content)
            </div>

            <hr class="my-2 mt-5">

            <div class="d-flex justify-content-center align-content-start">
                <div class="d-flex flex-column justify-content-center align-items-center">
                    <i class="fa-solid fa-eye mb-1 text-dark 
                        mx-3 fs-5">
                    </i>
                    <small>@(Model.Post.ViewCount == 0 ? 0 : Model.Post.ViewCount)</small>

                </div>
                <div class="d-flex flex-column justify-content-center align-items-center">
                    <a href="#"
                       class="like-button fa-solid mb-1 fa-hand-holding-heart
                        mx-3 fs-5  @(Model.IsLikedFromCurrentUser ? "liked" : "")"
                       data-post-id="@Model.Post.Id">
                    </a>
                    <small class="like-count">@(Model.Post.LikeCount)</small>

                </div>
                <div class="d-flex flex-column justify-content-start align-items-start">
                    <a id="shareBtn" class="bi bi-share-fill mx-3 mt-1 fs-5 blacktogray d-flex" href="#" role="button" aria-haspopup="true" aria-expanded="false"></a>
                </div>


                <!-- Popup Modal -->
                <div id="sharePopup" style="display:none; position:absolute; background:#fff; border:1px solid #ccc; padding:10px; border-radius:5px; box-shadow: 0 2px 8px rgba(0,0,0,0.2); z-index:1000;">
                    <a href="#" id="twitterShare" target="_blank" class="btn btn-sm btn-outline-dark mb-2" style="display:block; margin-bottom:5px;">Share with <i class="fa-brands fw-bold text-dark fa-x-twitter"></i></a>
                    <a href="#" id="linkedInShare" target="_blank" class="btn btn-sm btn-outline-dark" style="display:block;">Share with <i class="fa-brands fw-bold fa-linkedin-in"></i></a>
                </div>
                @* <p class="text-gradient d-flex align-content-center mb-0">This post has been viewed @Model.Post.ViewCount times!</p> *@
            </div>
            <hr class="my-2">

            <!-- Author Info Section -->
            <div class="author-card">
                <div class="author-avatar">
                    <img src="/img/userPhotos/@Model.Post.Author.UserName/@Model.Post.Author.ProfilePicture" alt="John Doe">
                </div>
                <div>
                    <span class="author-by">Article by</span>
                    <h3 class="author-name"><a asp-controller="User" asp-action="Profile" asp-route-userName="@Model.Post.Author.UserName" class="text-decoration-none blacktograydark">@Model.Post.Author.FullName</a></h3>
                    <p class="author-bio">@(Model.Post.Author.Title is null ? "" : Model.Post.Author.Title ) @(Model.Post.Author.CurrentPosition is null ? "" : Model.Post.Author.CurrentPosition + " |") @(Model.Post.Author.UniversityName is null ? "" : Model.Post.Author.UniversityName)</p>
                    <div class="author-social">
                        @if(Model.Post.Author.XAddress != null)
                        {
                        <a href="@Model.Post.Author.XAddress" target="_blank" class="social-link " aria-label="Twitter">
                                <i class="fa-brands fa-x-twitter text-dark "></i>
                        </a>
                            
                        }
                        @if(Model.Post.Author.LinkedinAddress != null)
                        {
                            <a href="@Model.Post.Author.LinkedinAddress" class="social-link" target="_blank" aria-label="Twitter">
                                <i class="fa-brands fa-linkedin-in text-dark"></i>
                        </a>
                            
                        }
                        @if(Model.Post.Author.GithubAddress != null)
                        {
                            <a href="@Model.Post.Author.GithubAddress" class="social-link" target="_blank" aria-label="Twitter">
                                <i class="fa-brands fa-github text-dark"></i>
                        </a>
                            
                        }
                        @if (Model.Post.Author.MediumAddress != null)
                        {
                            <a href="@Model.Post.Author.MediumAddress" class="social-link" target="_blank" aria-label="Twitter">
                                <i class="fa-brands fa-medium text-dark"></i>
                            </a>

                        }
                        @if (Model.Post.Author.YoutubeAddress != null)
                        {
                            <a href="@Model.Post.Author.YoutubeAddress" class="social-link" target="_blank" aria-label="Twitter">
                                <i class="fa-solid fa-youtube text-dark"></i>
                            </a>

                        }
                        @if (Model.Post.Author.PersonalWebAddress != null)
                        {
                            <a href="@Model.Post.Author.PersonalWebAddress" class="social-link" target="_blank" aria-label="Twitter">
                                <i class="fa-solid fa-earth-americas text-dark"></i>
                            </a>

                        }
                        @* <a href="#" class="social-link" aria-label="GitHub">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
                            </svg>
                        </a>
                        <a href="#" class="social-link" aria-label="LinkedIn">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
                            </svg>
                        </a> *@
                    </div>
                </div>
            </div>
        </article>

        <!-- Comment Section -->
        <div class="comments">
            <div class="comments-header">
                <h3 class="comments-title">Comments <span class="comment-count">@Model.Comments.Count</span></h3>
            </div>

                <div class="comment-form d-flex justify-content-center">
            @if (User.Identity.IsAuthenticated)
            {
                <!-- Comment Form -->
                    <div class="commentor-avatar">
                        <img src="/img/userPhotos/@(User.Identity.Name)/@User.FindFirst("ProfilePictureUrl")?.Value" />
                        <span>Y</span>
                    </div>
                    <form class="comment-input main-comment-form" id="commentForm">
                        <textarea id="commentText" placeholder="Share your thoughts..." rows="3" required></textarea>
                        <div class="form-actions">
                            <button type="submit" class="btn post-reply-btn-alt2" id="submitBtn">Post Comment</button>
                        </div>
                        <div id="messageContainer"></div>
                    </form>

                    <script>
                        // Bu değerleri backend'den Razor ile al (örnek: ViewBag vs)

                        const parentCommentId = null; // Ana yorum olduğu için null

                        document.getElementById('commentForm').addEventListener('submit', async function (e) {
                            e.preventDefault();

                            const commentText = document.getElementById('commentText').value.trim();
                            const submitBtn = document.getElementById('submitBtn');
                            const messageContainer = document.getElementById('messageContainer');

                            if (!commentText) {
                                showMessage('Lütfen yorum metnini girin.', 'error');
                                return;
                            }

                            submitBtn.disabled = true;
                            submitBtn.textContent = 'Gönderiliyor...';
                            messageContainer.innerHTML = '';

                            try {
                                const viewModel = {
                                    AuthorId: currentUserId,
                                    Comment: commentText,
                                    PostId: currentPostId,
                                    ParentCommentId: parentCommentId
                                };

                                const response = await fetch('/Comment/AddComment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                    },
                                    body: JSON.stringify(viewModel)
                                });

                                if (response.ok) {
                                    const result = await response.json();
                                    // showMessage('Yorumunuz başarıyla gönderildi!', 'success');
                                    document.getElementById('commentText').value = '';
                                    addCommentToList(result);
                                } else {
                                    const errorText = await response.text();
                                    showMessage('Yorum gönderilirken hata oluştu: ' + errorText, 'error');
                                }

                            } catch (error) {
                                console.error('AJAX hatası:', error);
                                showMessage('Bağlantı hatası oluştu. Lütfen tekrar deneyin.', 'error');
                            } finally {
                                submitBtn.disabled = false;
                                submitBtn.textContent = 'Post Comment';
                            }
                        });

                        function showMessage(message, type) {
                            const messageContainer = document.getElementById('messageContainer');
                            messageContainer.innerHTML = `<div class="${type}-message">${message}</div>`;
                            setTimeout(() => {
                                messageContainer.innerHTML = '';
                            }, 5000);
                        }

                        function addCommentToList(comment) {
                            const newCommentHtml = `
                            <div class="comment">
                                <div class="commentor-avatar">
                                    <img src="${comment.authorProfileUrl}" />
                                    <span>${comment.authorName?.charAt(0) || "?"}</span>
                                </div>
                                <div class="comment-body">
                                    <div class="comment-header">
                                        <span class="comment-author">${comment.authorName}</span>
                                        <span class="comment-date">${comment.createdDate}</span>
                                    </div>
                                    <div class="comment-content">
                                        <p>${comment.comment}</p>
                                    </div>
                                    <div class="comment-footer">
                                        <button class="reply-btn" type="button" data-comment-id="${comment.commentId}">Reply</button>
                                        <button class="like-btn">Like (0)</button>
                                    </div>

                                    <div class="reply-box d-flex d-none justify-content-start comment-reply-sm mt-4">
                                        <div class="commentor-avatar ms-1">
                                            <img src="${comment.authorProfileUrl}" />
                                            <span>${comment.authorName?.charAt(0) || "?"}</span>
                                        </div>
                                        <form class="comment-input reply-form" method="post">
                                            <textarea name="ReplyText" class="reply-textarea" placeholder="Share your reply..." rows="3" required cols="40"></textarea>
                                            <input type="hidden" name="ParentCommentId" value="${comment.commentId}" />
                                            <div class="form-actions">
                                                <button type="submit" class="btn post-reply-btn-alt2">Post Reply</button>
                                            </div>
                                            <div class="messageContainer"></div>
                                        </form>
                                    </div>

                                    <div class="reply-list mt-3 ms-2"></div>
                                </div>
                            </div>
                            `;

                            const firstComment = document.querySelector(".comment");
                            if (firstComment) {
                                firstComment.insertAdjacentHTML('beforebegin', newCommentHtml);
                            } else {
                                const commentListContainer = document.getElementById("commentList") || document.body;
                                commentListContainer.insertAdjacentHTML('beforeend', newCommentHtml);
                            }
                        }
                    </script>

            }
            else
            {
                <div class="d-flex justify-content-center mb-4">
                    <div class="d-flex flex-column justify-content-center">
                        <p class="text-black-50">You cannot comment because you are not logged in.</p><br />
                        <a class="text-center" asp-controller="user" asp-action="SignIn">Log in to comment.</a>
                    </div>
                </div>
                <hr />
            }
                </div>
            <!-- Comment List -->
            <div class="comment-list commentList">
                @* <!-- Main Comment -->
                <div class="comment">
                    <div class="comment-avatar">
                        <span>JD</span>
                    </div>
                    <div class="comment-body">
                        <div class="comment-header">
                            <span class="comment-author">John Doe</span>
                            <span class="comment-date">June 15, 2024</span>
                        </div>
                        <div class="comment-content">
                            <p>Great article! The point about edge computing is particularly insightful. I've been working on a project that could benefit from this approach.</p>
                        </div>
                        <div class="comment-footer">
                            <button class="reply-btn">Reply</button>
                            <button class="like-btn">Like (5)</button>
                        </div>

                        <!-- Reply -->
                        <div class="comment-reply">
                            <div class="comment-avatar">
                                <span>AS</span>
                            </div>
                            <div class="comment-body">
                                <div class="comment-header">
                                    <span class="comment-author">Alice Smith</span>
                                    <span class="comment-date">June 16, 2024</span>
                                </div>
                                <div class="comment-content">
                                    <p>John I completely agree! We implemented edge computing in our IoT solution and saw a 40% reduction in latency.</p>
                                </div>
                                <div class="comment-footer">
                                    <button class="reply-btn">Reply</button>
                                    <button class="like-btn">Like (3)</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div> *@

                @if (Model.Comments.Count == 0)
                {
                    @if (User.Identity.IsAuthenticated)
                    {
                        <p class="text-center text-muted my-5">No comments yet. Be the first to comment!</p>
                    }
                }
                else
                {
                    @foreach (var comment in Model.Comments.Where(c => c.ParentCommentId == null))
                    {
                        <!-- Another Comment -->
                        <div class="comment">
                            <div class="commentor-avatar">
                                <img src="/img/userPhotos/@comment.Author.UserName/@comment.Author.ProfilePicture" />
                                <span>Y</span>
                            </div>
                            <div class="comment-body">
                                <div class="comment-header">
                                    <span class="comment-author">@comment.Author.FullName</span>
                                    <span class="comment-date">@comment.CreatedTime.ToString("dddd d, yyyy", CultureInfo.InvariantCulture)</span>
                                </div>
                                <div class="comment-content">
                                    <p>@comment.Content</p>
                                </div>
                                <div class="comment-footer">
                                    @if(User.Identity.IsAuthenticated)
                                    {
                                        <button class="reply-btn" type="button" data-comment-id="@comment.Id" >Reply</button>
                                    }
                                    <button class="like-btn" data-bs-toggle="tooltip" disabled title="Will be added in future updates">
                                        Like (@(comment.LikeCount))
                                    </button>
                                </div>
                                <!-- Dinamik olarak açılıp kapanan reply alanı -->
                                <div class="reply-box d-flex d-none justify-content-start comment-reply-sm mt-4">
                                    <div class="commentor-avatar ms-1">
                                        @if (User.Identity.IsAuthenticated)
                                        {
                                        <img src="/img/userPhotos/@User.Identity.Name/@Model.CurrentUser!.ProfilePicture" />
                                            
                                        }
                                        <span>Y</span>
                                    </div>
                                    <form class="comment-input reply-form" method="post">
                                        <textarea name="ReplyText" class="reply-textarea" placeholder="Share your reply..." rows="3" required cols="40"></textarea>
                                        <input type="hidden" name="ParentCommentId" value="@comment.Id" />
                                        <div class="form-actions">
                                            <button type="submit" class="btn post-reply-btn-alt2">Post Reply</button>
                                        </div>
                                        <div class="messageContainer"></div>
                                    </form>
                                </div>

                                    <div class="reply-list">
                                @if (comment.Replies.Count > 0)
                                {
                                    <div class="mt-4 ms-2">

                                    
                                        @foreach (var reply in comment.Replies)
                                        {
                                            <div class="comment-reply-sm">
                                                <div class="commentor-avatar ms-2">
                                                    <img src="/img/userPhotos/@reply.Author.UserName/@reply.Author.ProfilePicture" />
                                                    <span>Y</span>
                                                </div>
                                                <div class="comment-body">
                                                    <div class="comment-header">
                                                        <span class="comment-author">@reply.Author.FullName</span>
                                                            <span class="comment-date">@reply.CreatedTime.ToString("dddd d, yyyy", CultureInfo.InvariantCulture)</span>
                                                    </div>
                                                    <div class="comment-content">
                                                        <p>@reply.Content</p>
                                                    </div>
                                                    <div class="comment-footer">
                                                            <button class="like-btn" disabled title="Will be added in future updates">
                                                            Like (@(reply.LikeCount))
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        </div>
                                }
                                    </div>
                            </div>
                        </div>
                    }

                    <script>
                        const parentCommentId = null; // Ana yorum için null

                        document.getElementById('commentForm').addEventListener('submit', async function(e) {
                            e.preventDefault();

                            const commentText = document.getElementById('commentText').value.trim();
                            const submitBtn = document.getElementById('submitBtn');
                            const messageContainer = document.getElementById('messageContainer');

                            if (!commentText) {
                                showMessage('Lütfen yorum metnini girin.', 'error');
                                return;
                            }

                            submitBtn.disabled = true;
                            submitBtn.textContent = 'Gönderiliyor...';
                            messageContainer.innerHTML = '';

                            try {
                                const viewModel = {
                                    AuthorId: currentUserId,
                                    Comment: commentText,
                                    PostId: currentPostId,
                                    ParentCommentId: parentCommentId
                                };

                                const response = await fetch('/Comment/AddComment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                    },
                                    body: JSON.stringify(viewModel)
                                });

                                if (response.ok) {
                                    const result = await response.json();

                                    showMessage('Yorumunuz başarıyla gönderildi!', 'success');
                                    document.getElementById('commentText').value = '';

                                    addCommentToList(result);
                                } else {
                                    const errorText = await response.text();
                                    showMessage('Yorum gönderilirken hata oluştu: ' + errorText, 'error');
                                }

                            } catch (error) {
                                console.error('AJAX hatası:', error);
                                showMessage('Bağlantı hatası oluştu. Lütfen tekrar deneyin.', 'error');
                            } finally {
                                submitBtn.disabled = false;
                                submitBtn.textContent = 'Post Comment';
                            }
                        });

                        function showMessage(message, type) {
                            const messageContainer = document.getElementById('messageContainer');
                            messageContainer.innerHTML = `<div class="${type}-message">${message}</div>`;

                            setTimeout(() => {
                                messageContainer.innerHTML = '';
                            }, 5000);
                        }

                        function addCommentToList(comment) {
                            const commentList = document.getElementById('commentList');

                            const commentHtml = `
                                <div class="comment">
                                    <div class="commentor-avatar">
                                        <img src="${comment.authorProfileUrl}" />
                                        <span>${comment.authorName?.charAt(0) || "?"}</span>
                                    </div>
                                    <div class="comment-body">
                                        <div class="comment-header">
                                            <span class="comment-author">${comment.authorName}</span>
                                            <span class="comment-date">${comment.createdDate}</span>
                                        </div>
                                        <div class="comment-content">
                                            <p>${comment.comment}</p>
                                        </div>
                                        <div class="comment-footer">
                                            <button class="reply-btn" type="button" data-comment-id="${comment.commentId}">Reply</button>
                                            <button class="like-btn">Like (0)</button>
                                        </div>

                                        <div class="reply-box d-flex d-none justify-content-start comment-reply-sm mt-4">
                                            <div class="commentor-avatar ms-1">
                                                <img src="${comment.authorProfileUrl}" />
                                                <span>${comment.authorName?.charAt(0) || "?"}</span>
                                            </div>
                                            <form class="comment-input reply-form" method="post">
                                                <textarea name="ReplyText" class="reply-textarea" placeholder="Share your reply..." rows="3" required cols="40"></textarea>
                                                <input type="hidden" name="ParentCommentId" value="${comment.commentId}" />
                                                <div class="form-actions">
                                                    <button type="submit" class="btn post-reply-btn-alt2">Post Reply</button>
                                                </div>
                                                <div class="messageContainer"></div>
                                            </form>
                                        </div>

                                        <div class="reply-list mt-3 ms-2"></div>
                                    </div>
                                </div>
                            `;

                            commentList.insertAdjacentHTML('afterbegin', commentHtml);
                        }
                    </script>
                    <!-- JavaScript kodunu foreach döngüsü dışına taşıyın -->
                    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                    <script>
                        $(document).ready(function () {
                            // Reply butonuna basınca o yorumun altındaki formu aç/kapat
                            $(document).on("click", ".reply-btn", function () {
                                console.log("Reply button clicked");

                                const comment = $(this).closest(".comment");
                                const replyBox = comment.find(".reply-box").first();

                                if (replyBox.length) {
                                    replyBox.toggleClass("d-none");
                                } else {
                                    console.warn("Reply box bulunamadı!");
                                }
                            });

                            // Form gönderimi
                            $(document).on("submit", ".reply-form", function (e) {
                                e.preventDefault();

                                const form = $(this);
                                const replyText = form.find(".reply-textarea").val();
                                const parentCommentId = form.find("input[name='ParentCommentId']").val();

                                if (replyText.trim() === "") {
                                    form.find(".messageContainer").text("Yorum boş olamaz.");
                                    return;
                                }

                                                        $.ajax({
                            type: "POST",
                            url: "/Comment/AddComment",
                            contentType: "application/json",
                            data: JSON.stringify({
                                AuthorId: currentUserId,
                                Comment: replyText,
                                PostId: currentPostId,
                                ParentCommentId: parentCommentId
                            }),
                            success: function(response) {  // <-- buraya response parametresi geldi!
                                form.find(".messageContainer").text("Cevap gönderildi.");
                                form.find(".reply-textarea").val("");
                                form.closest(".reply-box").addClass("d-none");

                                                        console.log(response.Comment);      // büyük harfli
                                                        console.log(response.authorProfileUrl);      // büyük harfli
                        console.log(response.comment);      // küçük harfli
                        console.log(response.AuthorName);   // büyük harfli
                        console.log(response.authorName);   // küçük harfli
                        console.log(response.CreatedDate);  // büyük harfli
                        console.log(response.createdDate);  // küçük harfli
                                const newReplyHtml = `
                                    <div class="comment-reply-sm mt-2">
                                        <div class="commentor-avatar ms-2">
                                            <img src="${response.authorProfileUrl}" />
                                            <span>${response.authorName?.charAt(0) || "?"}</span>
                                        </div>
                                        <div class="comment-body">
                                            <div class="comment-header">
                                                <span class="comment-author">${response.authorName}</span>
                                                <span class="comment-date">${response.createdDate}</span>
                                            </div>
                                            <div class="comment-content">
                                                <p>${response.comment}</p>
                                            </div>
                                            <div class="comment-footer">
                                                <button class="like-btn">Like (0)</button>
                                            </div>
                                        </div>
                                    </div>
                                `;

                                form.closest(".comment").find(".reply-list").append(newReplyHtml);
                            },
                            error: function () {
                                form.find(".messageContainer").text("Bir hata oluştu.");
                            }
                        });

                            });
                        });
                    </script>
                }
            </div>
        </div>
        <style>
            .related-grid {
                display: flex;
                gap: 1.5rem;
                justify-content: center;
            }

                .related-grid .col-md-4 {
                    flex: 1;
                    max-width: calc(33.333% - 1rem);
                }

            .related-post {
                height: 100%; /* Kartların yüksekliğini eşitler */
                display: flex;
                flex-direction: column;
            }

            .related-post-body {
                flex-grow: 1; /* İçerik alanını esnetir */
            }
        </style>
        <!-- Related Posts -->
        <section class="related-posts">
            <h2 class="related-title">You Might Also Like</h2>
            <div class="related-grid">
                @foreach (var post in Model.RecommendedPosts)
                {
                    <div class="col-md-4">
                    <article class="related-post post-title-link">
                        <a asp-controller="Post" asp-action="PostDetails" asp-route-id="@post.Id" class="text-decoration-none">
                            <img src="@post.CoverImageUrl" alt="@post.CategoryName" class="related-post-img" />
                            <div class="related-post-body">
                                <h3 class="related-post-title">@post.Title</h3>
                                <span class="related-post-link">Read article</span>
                            </div>
                        </a>
                    </article>

                    </div>
                }
            </div>
        </section>

    </div>
    <form method="post">
        @Html.AntiForgeryToken()
    </form>

</body>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".like-button").forEach(function (btn) {
            btn.addEventListener("click", function (e) {
                e.preventDefault();

                const postId = this.dataset.postId;
                const button = this;
                const countSpan = this.nextElementSibling; // <small> elementi

                fetch('/Post/ToggleLike', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ postId: postId })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("İstek başarısız.");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.liked) {
                        button.classList.add("liked");
                    } else {
                        button.classList.remove("liked");
                    }

                    // Sayıyı güncelle
                    countSpan.textContent = data.likeCount;
                })
                .catch(err => {
                    console.error("Hata:", err);
                });
            });
        });
    });
</script>

<script>

    document.addEventListener("DOMContentLoaded", function () {
        const shareBtn = document.getElementById("shareBtn");
        const sharePopup = document.getElementById("sharePopup");

        // Post URL ve başlık (dinamik olarak backend'den alınabilir)
        const postUrl = window.location.href; // Veya sabit: 'https://site.com/post/123'
        const postTitle = document.title;     // İstersen başka bir başlık da verilebilir

        // Paylaşım linkleri hazırla
        const twitterUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(postUrl)}&text=${encodeURIComponent(postTitle)}`;
        const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(postUrl)}`;

        document.getElementById("twitterShare").href = twitterUrl;
        document.getElementById("linkedInShare").href = linkedInUrl;

        // Popup'u toggle et
        shareBtn.addEventListener("click", function (e) {
            e.preventDefault();

            if (sharePopup.style.display === "none" || sharePopup.style.display === "") {
                // Butonun hemen altına konumlandır
                const rect = shareBtn.getBoundingClientRect();
                sharePopup.style.top = (rect.bottom + window.scrollY + 5) + "px";
                sharePopup.style.left = (rect.left + window.scrollX) + "px";
                sharePopup.style.display = "block";
            } else {
                sharePopup.style.display = "none";
            }
        });

        // Popup dışına tıklanınca kapanması için
        document.addEventListener("click", function (e) {
            if (!sharePopup.contains(e.target) && e.target !== shareBtn) {
                sharePopup.style.display = "none";
            }
        });
    });
</script>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const btn = document.getElementById("summarizeBtn");
            if (btn) {

                btn.addEventListener("click", async () => {
        const postId = document.getElementById("postId").value;

                    console.log("Butona basıldı, postId:", postId);

                    const res = await fetch("/api/chat/summarize", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ postId })
                    });

                    if (!res.ok) {
                        console.error("Fetch hatası:", res.status, res.statusText);
                        return;
                    }

                    const data = await res.json();
                    document.getElementById("summaryResult").innerText = data.summary;
                });
            }
        });
    </script>
}

